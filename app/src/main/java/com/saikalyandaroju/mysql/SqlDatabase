----------------------------------------------CREATE DATABASE--------------------------------

* The CREATE DATABASE statement is used to create a new SQL database.

* CREATE DATABASE databasename;

* SHOW DATABASES; // will show all databases.

-------------------------------------------------DROP-------------------------------------------------

* The DROP DATABASE statement is used to drop an existing SQL database.

* DROP DATABASE databasename;



-----------------------------------------------TABLE-------------------------------------------------

* The CREATE TABLE statement is used to create a new table in a database.

* CREATE TABLE table_name (
      column1 datatype,
      column2 datatype,
      column3 datatype,
     ....
  );

* CREATE TABLE new_table_name AS
      SELECT column1, column2,...
      FROM existing_table_name
      WHERE ....; // create table using another.

* Example:

  1) CREATE TABLE Persons (
      PersonID int,
      LastName varchar(255),
      FirstName varchar(255),
      Address varchar(255),
      City varchar(255)
  );

  2) CREATE TABLE TestTable AS
     SELECT customername, contactname
     FROM customers;
-----------------------------------------------DROP---------------------------------------------
*  The DROP TABLE statement is used to drop an existing table in a database.

*  DROP TABLE table_name;

--------------------------------------------TRUNCATE-------------------------------------------
*   TRUNCATE TABLE statement is used to delete the data inside a table, but not the table itself.

*  TRUNCATE TABLE table_name;

-----------------------------------------ALTER--------------------------------------------------

* The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.

*  The ALTER TABLE statement is also used to add and drop various constraints on an existing table.

* ALTER TABLE table_name
  ADD column_name datatype;

* ALTER TABLE table_name
  DROP COLUMN column_name;

* ALTER TABLE table_name
  MODIFY COLUMN column_name datatype;

-------------------------------------------CONSTRAINTS---------------------------------------------------

* CREATE TABLE table_name (
      column1 datatype constraint,
      column2 datatype constraint,
      column3 datatype constraint,
      ....
  );

* NOT NULL - Ensures that a column cannot have a NULL value
  UNIQUE - Ensures that all values in a column are different
  PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
  FOREIGN KEY - Prevents actions that would destroy links between tables
  CHECK - Ensures that the values in a column satisfies a specific condition
  DEFAULT - Sets a default value for a column if no value is specified
  CREATE INDEX - Used to create and retrieve data from the database very quickly

*  you can have many UNIQUE constraints per table, but only one PRIMARY KEY constraint per table.

*  Example:

  1) ALTER TABLE Persons
     MODIFY Age int NOT NULL;


   2)CREATE TABLE Persons (
         ID int NOT NULL,
         LastName varchar(255) NOT NULL,
         FirstName varchar(255),
         Age int,
         UNIQUE (ID)
     );

   3) CREATE TABLE Persons (
          ID int NOT NULL,
          LastName varchar(255) NOT NULL,
          FirstName varchar(255),
          Age int,
          CONSTRAINT UC_Person UNIQUE (ID,LastName)
      );

   4)ALTER TABLE Persons
     ADD UNIQUE (ID);

   5) ALTER TABLE Persons
      ADD CONSTRAINT UC_Person UNIQUE (ID,LastName);


   6)ALTER TABLE Persons
     DROP INDEX UC_Person;


   7) CREATE TABLE Persons (
          ID int NOT NULL,
          LastName varchar(255) NOT NULL,
          FirstName varchar(255),
          Age int,
          CONSTRAINT PK_Person PRIMARY KEY (ID,LastName)
      );

   8)ALTER TABLE Persons
     ADD PRIMARY KEY (ID);

   9) ALTER TABLE Persons
      ADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);

   10)ALTER TABLE Persons
      DROP PRIMARY KEY;


   11)CREATE TABLE Orders (
          OrderID int NOT NULL,
          OrderNumber int NOT NULL,
          PersonID int,
          PRIMARY KEY (OrderID),
          FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
      );

   12) ALTER TABLE Orders
       ADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);

    13) ALTER TABLE Orders
        DROP FOREIGN KEY FK_PersonOrder;

    14) CREATE TABLE Persons (
            ID int NOT NULL,
            LastName varchar(255) NOT NULL,
            FirstName varchar(255),
            Age int,
            CHECK (Age>=18)
        );

    15) CREATE TABLE Persons (
            ID int NOT NULL,
            LastName varchar(255) NOT NULL,
            FirstName varchar(255),
            Age int,
            City varchar(255),
            CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')
        );

     16) ALTER TABLE Persons
         ADD CHECK (Age>=18);

     17) ALTER TABLE Persons
         DROP CHECK CHK_PersonAge;

     18) CREATE TABLE Persons (
             ID int NOT NULL,
             LastName varchar(255) NOT NULL,
             FirstName varchar(255),
             Age int,
             City varchar(255) DEFAULT 'Sandnes'
         );

      19) CREATE TABLE Orders (
              ID int NOT NULL,
              OrderNumber int NOT NULL,
              OrderDate date DEFAULT CURRENT_DATE()
          );

       20) ALTER TABLE Persons
           ALTER City SET DEFAULT 'Sandnes';

     21) ALTER TABLE Persons
         ALTER City DROP DEFAULT;


  ----------------------------------------------------------------INDEXS--------------------------------------


  * The CREATE INDEX statement is used to create indexes in tables.

  *  Indexes are used to retrieve data from the database more quickly than otherwise.
     The users cannot see the indexes, they are just used to speed up searches/queries.


  * Note: Updating a table with indexes takes more time than updating a table without (because the indexes also need an update).
    So, only create indexes on columns that will be frequently searched against.

  * CREATE UNIQUE INDEX index_name
    ON table_name (column1, column2, ...); // duplicates not allowed.

  * Example:

  1) CREATE INDEX idx_lastname
     ON Persons (LastName);

  2) CREATE INDEX idx_pname
     ON Persons (LastName, FirstName);

  3) ALTER TABLE table_name
     DROP INDEX index_name;


 -----------------------------------------------------AUTO INCREMENT-----------------------------------------


 * CREATE TABLE Persons (
       Personid int NOT NULL AUTO_INCREMENT,
       LastName varchar(255) NOT NULL,
       FirstName varchar(255),
       Age int,
       PRIMARY KEY (Personid)
   );


  * ALTER TABLE Persons AUTO_INCREMENT=100;



  -------------------------------------------------------DATES----------------------------------------------


  *  DATE - format YYYY-MM-DD
     DATETIME - format: YYYY-MM-DD HH:MI:SS
     TIMESTAMP - format: YYYY-MM-DD HH:MI:SS
     YEAR - format YYYY or YY

  * SELECT * FROM Orders WHERE OrderDate='2008-11-11'

  * Two dates can easily be compared if there is no time component involved!



  --------------------------------------------------VIEWS--------------------------------------------------


  * In SQL, a view is a virtual table based on the result-set of an SQL statement.
  * The fields in a view are fields from one or more real tables in the database.

  * CREATE VIEW view_name AS
    SELECT column1, column2, ...
    FROM table_name
    WHERE condition;


  * CREATE OR REPLACE VIEW view_name AS
    SELECT column1, column2, ...
    FROM table_name
    WHERE condition; // updating.


  * DROP VIEW view_name;

  * CREATE VIEW [Products Above Average Price] AS
    SELECT ProductName, Price
    FROM Products
    WHERE Price > (SELECT AVG(Price) FROM Products);


